<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_supplier_order_cart".
 *
 * @property string $kode_unik
 * @property integer $user_id
 * @property integer $material_id
 * @property integer $submaterial_id
 * @property integer $supplier_barang_id
 * @property integer $supplier_id
 * @property double $jumlah
 * @property integer $volume
 * @property integer $harga_satuan
 * @property integer $subtotal
 * @property string $created_at
 * @property string $updated_at
 * @property string $deleted_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $deleted_by
 * @property integer $flag
 * @property string $no_spk
 * @property string $keterangan_proyek
 * @property integer $valid_spk
 * @property integer $id
 * @property string $aliasModel
 */
abstract class SupplierOrderCart extends \yii\db\ActiveRecord
{
    /**
     * BaseModel rules. 
     **/
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_supplier_order_cart';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => \app\components\behaviors\UUIDBehavior::class,
                'model' => get_called_class(),
                'primaryKey' => 'id',
            ],
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['kode_unik', 'user_id', 'supplier_barang_id'], 'required'],
            [['user_id', 'material_id', 'submaterial_id', 'supplier_barang_id', 'supplier_id', 'volume', 'harga_satuan', 'subtotal', 'created_by', 'updated_by', 'deleted_by', 'flag', 'valid_spk'], 'integer'],
            [['jumlah'], 'number'],
            [['created_at', 'updated_at', 'deleted_at'], 'safe'],
            [['keterangan_proyek'], 'string'],
            [['kode_unik'], 'string', 'max' => 50],
            [['no_spk'], 'string', 'max' => 100],
            [['id'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'kode_unik' => Yii::t('models', 'Kode Unik'),
            'user_id' => Yii::t('models', 'User'),
            'material_id' => Yii::t('models', 'Material'),
            'submaterial_id' => Yii::t('models', 'Submaterial'),
            'supplier_barang_id' => Yii::t('models', 'Supplier Barang'),
            'supplier_id' => Yii::t('models', 'Supplier'),
            'jumlah' => Yii::t('models', 'Jumlah'),
            'volume' => Yii::t('models', 'Volume'),
            'harga_satuan' => Yii::t('models', 'Harga Satuan'),
            'subtotal' => Yii::t('models', 'Subtotal'),
            'created_at' => Yii::t('models', 'Dibuat pada'),
            'updated_at' => Yii::t('models', 'Diubah Pada'),
            'deleted_at' => Yii::t('models', 'Dihapus pada'),
            'created_by' => Yii::t('models', 'Dibuat oleh'),
            'updated_by' => Yii::t('models', 'Diubah oleh'),
            'deleted_by' => Yii::t('models', 'Dihapus oleh'),
            'flag' => Yii::t('models', 'Flag'),
            'no_spk' => Yii::t('models', 'No Spk'),
            'keterangan_proyek' => Yii::t('models', 'Keterangan Proyek'),
            'valid_spk' => Yii::t('models', 'Valid Spk'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'jumlah' => Yii::t('models', 'jumlah'),
            'volume' => Yii::t('models', 'volume meter kubik'),
            'flag' => Yii::t('models', '0=hapus, 1=aktif'),
        ]);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'kode_unik',
            'user_id',
            'material_id',
            'submaterial_id',
            'supplier_barang_id',
            'supplier_id',
            'jumlah',
            'volume',
            'harga_satuan',
            'subtotal',
            'created_at',
            'updated_at',
            'deleted_at',
            'created_by',
            'updated_by',
            'deleted_by',
            'flag',
            'no_spk',
            'keterangan_proyek',
            'valid_spk',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if(isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function($model) {
                return $model->id;
            };
        endif;
        if(isset($parent['kode_unik'])) :
            unset($parent['kode_unik']);
            $parent['kode_unik'] = function($model) {
                return $model->kode_unik;
            };
        endif;
        if(isset($parent['user_id'])) :
            unset($parent['user_id']);
            $parent['user_id'] = function($model) {
                return $model->user_id;
            };
        endif;
        if(isset($parent['material_id'])) :
            unset($parent['material_id']);
            $parent['material_id'] = function($model) {
                return $model->material_id;
            };
        endif;
        if(isset($parent['submaterial_id'])) :
            unset($parent['submaterial_id']);
            $parent['submaterial_id'] = function($model) {
                return $model->submaterial_id;
            };
        endif;
        if(isset($parent['supplier_barang_id'])) :
            unset($parent['supplier_barang_id']);
            $parent['supplier_barang_id'] = function($model) {
                return $model->supplier_barang_id;
            };
        endif;
        if(isset($parent['supplier_id'])) :
            unset($parent['supplier_id']);
            $parent['supplier_id'] = function($model) {
                return $model->supplier_id;
            };
        endif;
        if(isset($parent['jumlah'])) :
            unset($parent['jumlah']);
            $parent['jumlah'] = function($model) {
                return $model->jumlah;
            };
        endif;
        if(isset($parent['volume'])) :
            unset($parent['volume']);
            $parent['volume'] = function($model) {
                return $model->volume;
            };
        endif;
        if(isset($parent['harga_satuan'])) :
            unset($parent['harga_satuan']);
            $parent['harga_satuan'] = function($model) {
                return $model->harga_satuan;
            };
        endif;
        if(isset($parent['subtotal'])) :
            unset($parent['subtotal']);
            $parent['subtotal'] = function($model) {
                return $model->subtotal;
            };
        endif;
        if(isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->created_at, false);
            };
        endif;
        if(isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->updated_at, false);
            };
        endif;
        if(isset($parent['deleted_at'])) :
            unset($parent['deleted_at']);
            $parent['deleted_at'] = function($model) {
                return $model->deleted_at;
            };
        endif;
        if(isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function($model) {
                return $model->created_by;
            };
        endif;
        if(isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->updated_by, false);
            };
        endif;
        if(isset($parent['deleted_by'])) :
            unset($parent['deleted_by']);
            $parent['deleted_by'] = function($model) {
                return $model->deleted_by;
            };
        endif;
        if(isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function($model) {
                return $model->flag;
            };
        endif;
        if(isset($parent['no_spk'])) :
            unset($parent['no_spk']);
            $parent['no_spk'] = function($model) {
                return $model->no_spk;
            };
        endif;
        if(isset($parent['keterangan_proyek'])) :
            unset($parent['keterangan_proyek']);
            $parent['keterangan_proyek'] = function($model) {
                return $model->keterangan_proyek;
            };
        endif;
        if(isset($parent['valid_spk'])) :
            unset($parent['valid_spk']);
            $parent['valid_spk'] = function($model) {
                return $model->valid_spk;
            };
        endif;



        return $parent;
    }


    public static function faker($count = 10){
        $faker= \Faker\Factory::create();
        $faker->addProvider(new \app\components\faker\provider\MyImage($faker));
        $data = [];
        $maxId = static::find()->max('id');

        // relational data
        for ($i = 0; $i < $count; $i++) {
            $data[] = [ 
                "kode_unik" => $faker->text(),
                "user_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "material_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "submaterial_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "supplier_barang_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "supplier_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "jumlah" => $faker->text(),
                "volume" => $faker->randomNumber(),
                "harga_satuan" => $faker->randomNumber(),
                "subtotal" => $faker->randomNumber(),
                "created_at" => $faker->dateTime(),
                "updated_at" => $faker->dateTime(),
                "deleted_at" => $faker->dateTime(),
                "created_by" => $faker->randomNumber(),
                "updated_by" => $faker->randomNumber(),
                "deleted_by" => $faker->randomNumber(),
                "flag" => $faker->numberBetween(0, 1),
                "no_spk" => $faker->text(),
                "keterangan_proyek" => $faker->paragraphs($nb = 3, $asText = true),
                "valid_spk" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
            ];
        }
        return $data;
    }

}
