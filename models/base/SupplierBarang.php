<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "t_supplier_barang".
 *
 * @property integer $supplier_id
 * @property integer $material_id
 * @property integer $submaterial_id
 * @property string $nama_barang
 * @property string $slug
 * @property integer $satuan_id
 * @property integer $panjang
 * @property integer $lebar
 * @property integer $tebal
 * @property integer $stok
 * @property integer $harga_ritel
 * @property integer $harga_proyek
 * @property integer $minimal_beli_satuan
 * @property integer $minimal_beli_volume
 * @property string $deskripsi
 * @property string $gambar
 * @property string $params
 * @property string $created_at
 * @property string $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $deleted_by
 * @property integer $status
 * @property integer $flag
 * @property integer $id
 * @property string $aliasModel
 */
abstract class SupplierBarang extends \yii\db\ActiveRecord
{
    /**
     * BaseModel rules. 
     **/
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 't_supplier_barang';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => \app\components\behaviors\UUIDBehavior::class,
                'model' => get_called_class(),
                'primaryKey' => 'id',
            ],
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['supplier_id', 'submaterial_id', 'nama_barang', 'slug', 'satuan_id', 'stok', 'harga_ritel', 'harga_proyek', 'minimal_beli_satuan', 'minimal_beli_volume', 'deskripsi', 'gambar'], 'required'],
            [['supplier_id', 'material_id', 'submaterial_id', 'satuan_id', 'panjang', 'lebar', 'tebal', 'stok', 'harga_ritel', 'harga_proyek', 'minimal_beli_satuan', 'minimal_beli_volume', 'created_by', 'updated_by', 'deleted_by', 'status', 'flag'], 'integer'],
            [['deskripsi', 'gambar', 'params'], 'string'],
            [['created_at', 'updated_at'], 'safe'],
            [['nama_barang', 'slug'], 'string', 'max' => 255],
            [['id'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'supplier_id' => Yii::t('models', 'Supplier'),
            'material_id' => Yii::t('models', 'Material'),
            'submaterial_id' => Yii::t('models', 'Submaterial'),
            'nama_barang' => Yii::t('models', 'Nama Barang'),
            'slug' => Yii::t('models', 'Slug'),
            'satuan_id' => Yii::t('models', 'Satuan'),
            'panjang' => Yii::t('models', 'Panjang'),
            'lebar' => Yii::t('models', 'Lebar'),
            'tebal' => Yii::t('models', 'Tebal'),
            'stok' => Yii::t('models', 'Stok'),
            'harga_ritel' => Yii::t('models', 'Harga Ritel'),
            'harga_proyek' => Yii::t('models', 'Harga Proyek'),
            'minimal_beli_satuan' => Yii::t('models', 'Minimal Beli Satuan'),
            'minimal_beli_volume' => Yii::t('models', 'Minimal Beli Volume'),
            'deskripsi' => Yii::t('models', 'Deskripsi'),
            'gambar' => Yii::t('models', 'Gambar'),
            'params' => Yii::t('models', 'Params'),
            'created_at' => Yii::t('models', 'Dibuat pada'),
            'updated_at' => Yii::t('models', 'Diubah Pada'),
            'created_by' => Yii::t('models', 'Dibuat oleh'),
            'updated_by' => Yii::t('models', 'Diubah oleh'),
            'deleted_by' => Yii::t('models', 'Dihapus oleh'),
            'status' => Yii::t('models', 'Status'),
            'flag' => Yii::t('models', 'Flag'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'minimal_beli_satuan' => Yii::t('models', 'minimal pembelian satuan untuk supplier proyek'),
            'minimal_beli_volume' => Yii::t('models', 'minimal pembelian volume untuk supplier proyek'),
            'status' => Yii::t('models', '0=nonaktif, 1= aktif'),
        ]);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'supplier_id',
            'material_id',
            'submaterial_id',
            'nama_barang',
            'slug',
            'satuan_id',
            'panjang',
            'lebar',
            'tebal',
            'stok',
            'harga_ritel',
            'harga_proyek',
            'minimal_beli_satuan',
            'minimal_beli_volume',
            'deskripsi',
            'gambar',
            'params',
            'created_at',
            'updated_at',
            'created_by',
            'updated_by',
            'deleted_by',
            'status',
            'flag',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if(isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function($model) {
                return $model->id;
            };
        endif;
        if(isset($parent['supplier_id'])) :
            unset($parent['supplier_id']);
            $parent['supplier_id'] = function($model) {
                return $model->supplier_id;
            };
        endif;
        if(isset($parent['material_id'])) :
            unset($parent['material_id']);
            $parent['material_id'] = function($model) {
                return $model->material_id;
            };
        endif;
        if(isset($parent['submaterial_id'])) :
            unset($parent['submaterial_id']);
            $parent['submaterial_id'] = function($model) {
                return $model->submaterial_id;
            };
        endif;
        if(isset($parent['nama_barang'])) :
            unset($parent['nama_barang']);
            $parent['nama_barang'] = function($model) {
                return $model->nama_barang;
            };
        endif;
        if(isset($parent['slug'])) :
            unset($parent['slug']);
            $parent['slug'] = function($model) {
                return $model->slug;
            };
        endif;
        if(isset($parent['satuan_id'])) :
            unset($parent['satuan_id']);
            $parent['satuan_id'] = function($model) {
                return $model->satuan_id;
            };
        endif;
        if(isset($parent['panjang'])) :
            unset($parent['panjang']);
            $parent['panjang'] = function($model) {
                return $model->panjang;
            };
        endif;
        if(isset($parent['lebar'])) :
            unset($parent['lebar']);
            $parent['lebar'] = function($model) {
                return $model->lebar;
            };
        endif;
        if(isset($parent['tebal'])) :
            unset($parent['tebal']);
            $parent['tebal'] = function($model) {
                return $model->tebal;
            };
        endif;
        if(isset($parent['stok'])) :
            unset($parent['stok']);
            $parent['stok'] = function($model) {
                return $model->stok;
            };
        endif;
        if(isset($parent['harga_ritel'])) :
            unset($parent['harga_ritel']);
            $parent['harga_ritel'] = function($model) {
                return $model->harga_ritel;
            };
        endif;
        if(isset($parent['harga_proyek'])) :
            unset($parent['harga_proyek']);
            $parent['harga_proyek'] = function($model) {
                return $model->harga_proyek;
            };
        endif;
        if(isset($parent['minimal_beli_satuan'])) :
            unset($parent['minimal_beli_satuan']);
            $parent['minimal_beli_satuan'] = function($model) {
                return $model->minimal_beli_satuan;
            };
        endif;
        if(isset($parent['minimal_beli_volume'])) :
            unset($parent['minimal_beli_volume']);
            $parent['minimal_beli_volume'] = function($model) {
                return $model->minimal_beli_volume;
            };
        endif;
        if(isset($parent['deskripsi'])) :
            unset($parent['deskripsi']);
            $parent['deskripsi'] = function($model) {
                return $model->deskripsi;
            };
        endif;
        if(isset($parent['gambar'])) :
            unset($parent['gambar']);
            $parent['gambar'] = function($model) {
                return \Yii::$app->formatter->asMyImage($model->gambar, false);
            };
        endif;
        if(isset($parent['params'])) :
            unset($parent['params']);
            $parent['params'] = function($model) {
                return $model->params;
            };
        endif;
        if(isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->created_at, false);
            };
        endif;
        if(isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->updated_at, false);
            };
        endif;
        if(isset($parent['created_by'])) :
            unset($parent['created_by']);
            $parent['created_by'] = function($model) {
                return $model->created_by;
            };
        endif;
        if(isset($parent['updated_by'])) :
            unset($parent['updated_by']);
            $parent['updated_by'] = function($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->updated_by, false);
            };
        endif;
        if(isset($parent['deleted_by'])) :
            unset($parent['deleted_by']);
            $parent['deleted_by'] = function($model) {
                return $model->deleted_by;
            };
        endif;
        if(isset($parent['status'])) :
            unset($parent['status']);
            $parent['status'] = function($model) {
                return $model->status;
            };
        endif;
        if(isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function($model) {
                return $model->flag;
            };
        endif;



        return $parent;
    }


    public static function faker($count = 10){
        $faker= \Faker\Factory::create();
        $faker->addProvider(new \app\components\faker\provider\MyImage($faker));
        $data = [];
        $maxId = static::find()->max('id');

        // relational data
        for ($i = 0; $i < $count; $i++) {
            $data[] = [ 
                "supplier_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "material_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "submaterial_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "nama_barang" => $faker->name,
                "slug" => $faker->slug,
                "satuan_id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "panjang" => $faker->randomNumber(),
                "lebar" => $faker->randomNumber(),
                "tebal" => $faker->randomNumber(),
                "stok" => $faker->randomNumber(),
                "harga_ritel" => $faker->randomNumber(),
                "harga_proyek" => $faker->randomNumber(),
                "minimal_beli_satuan" => $faker->randomNumber(),
                "minimal_beli_volume" => $faker->randomNumber(),
                "deskripsi" => $faker->paragraphs($nb = 3, $asText = true),
                "gambar" => "tmp/". $faker->myimage($dir = \Yii::getAlias('@webroot/uploads/tmp'), $width = 640, $height = 480, "cats", false),
                "params" => $faker->text(),
                "created_at" => $faker->dateTime(),
                "updated_at" => $faker->dateTime(),
                "created_by" => $faker->randomNumber(),
                "updated_by" => $faker->randomNumber(),
                "deleted_by" => $faker->randomNumber(),
                "status" => $faker->text(),
                "flag" => $faker->numberBetween(0, 1),
                "id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
            ];
        }
        return $data;
    }

}
