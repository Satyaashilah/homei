<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\modules\android\models\base;

use Yii;

/**
 * This is the base-model class for table "android_menu_kategori".
 *
 * @property integer $id
 * @property string $category_name
 * @property integer $order
 * @property string $icon
 * @property integer $id_reference
 * @property integer $flag
 *
 * @property \app\modules\android\models\AndroidMenu[] $androidMenus
 * @property \app\modules\android\models\AndroidMenuKategori $referensi
 * @property \app\modules\android\models\AndroidMenuKategori[] $androidMenuKategoris
 * @property string $aliasModel
 */
abstract class AndroidMenuKategori extends \yii\db\ActiveRecord
{
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'android_menu_kategori';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category_name'], 'required'],
            ['id_reference', 'validateNotRelationSelf'],
            [['order', 'id_reference', 'flag'], 'integer'],
            [['category_name', 'icon'], 'string', 'max' => 255],
            [['id_reference'], 'exist', 'skipOnError' => true, 'targetClass' => \app\modules\android\models\AndroidMenuKategori::class, 'targetAttribute' => ['id_reference' => 'id']]
        ];
    }

    public function validateNotRelationSelf($attribute, $params, $validator)
    {
        if ($this->id == $this->$attribute) {
            $this->addError($attribute, 'Peringatan terdeteksi melakukan relasi ke diri sendiri. Ini dapat menyebabkan error dimasa depan.');
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'category_name' => Yii::t('models', 'Nama Kategori'),
            'order' => Yii::t('models', 'Order'),
            'icon' => Yii::t('models', 'Icon'),
            'id_reference' => Yii::t('models', 'Referensi'),
            'flag' => Yii::t('models', 'Flag'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAndroidMenus()
    {
        return $this->hasMany(\app\modules\android\models\AndroidMenu::class, ['id_category' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReferensi()
    {
        return $this->hasOne(\app\modules\android\models\AndroidMenuKategori::class, ['id' => 'id_reference']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAndroidMenuKategoris()
    {
        return $this->hasMany(\app\modules\android\models\AndroidMenuKategori::class, ['id_reference' => 'id']);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'category_name',
            'order',
            'icon',
            'id_reference',
            'flag',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }


    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
        // $parent['id'] = function ($model) {
        //     return $model->id;
        // };
        endif;
        if (isset($parent['category_name'])) :
            unset($parent['category_name']);
            $parent['category_name'] = function ($model) {
                return $model->category_name;
            };
        endif;
        if (isset($parent['order'])) :
            unset($parent['order']);
            $parent['order'] = function ($model) {
                return $model->order;
            };
        endif;
        if (isset($parent['icon'])) :
            unset($parent['icon']);
            $parent['icon'] = function ($model) {
                return \Yii::$app->formatter->asMyImage($model->icon, false);
            };
        endif;
        if (isset($parent['id_reference'])) :
            unset($parent['id_reference']);
        // $parent['id_reference'] = function ($model) {
        //     return $model->id_reference;
        // };
        // $parent['_referensi'] = function ($model) {
        //     $rel = $model->referensi;
        //     if ($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };
        // $parent['_android_menu_kategoris'] = function ($model) {
        //     $rel = $model->androidMenuKategoris;
        //     if ($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };
        endif;
        if (isset($parent['flag'])) :
            unset($parent['flag']);
        // $parent['flag'] = function ($model) {
        //     return $model->flag;
        // };
        endif;

        if ($this->selfs) {
            $parent["children"] = function ($model) {
                return $model->selfs;
            };
        } else {
            $parent['childrens'] = function ($model) {
                return $model->getMenuAndros()->select('name, label, type, icon, need_login, navigation, params')->orderBy('order')->all();
            };
        }

        // $parent['android_menu'] = function($model) {
        //     $rel = $model->androidMenus;
        //     if($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };
        // $parent['android_menu_kategori'] = function($model) {
        //     $rel = $model->androidMenuKategoris;
        //     if($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };

        return $parent;
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMenuAndros()
    {
        return $this->hasMany(\app\modules\android\models\base\AndroidMenu::class, ['id_category' => 'id']);
    }


    public function getSelf()
    {
        return $this->hasOne(static::class, ['id' => 'id_reference']);
    }

    public function getSelfs()
    {
        return $this->hasMany(static::class, ['id_reference' => 'id']);
    }


    public static function faker($count = 10)
    {
        $faker = \Faker\Factory::create();
        $data = [];
        $maxId = static::find()->max('id');

        $relationalreference = \app\components\Constant::getIDs(\app\modules\android\models\AndroidMenuKategori::find()->select('id')->all(), 'id');

        for ($i = 0; $i < $count; $i++) {
            $data[] = [
                "id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
                "category_name" => $faker->name,
                "order" => $faker->randomNumber(),
                "icon" => $faker->text(),
                "id_reference" => \app\components\Constant::getRandomFrom($relationalreference),
                "flag" => $faker->numberBetween(0, 1),
            ];
        }
        return $data;
    }
}
