<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\modules\accesslog\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "access_log".
 *
 * @property integer $id
 * @property string $type
 * @property integer $user_id
 * @property string $username
 * @property string $role
 * @property string $path
 * @property string $request
 * @property string $response
 * @property string $method
 * @property string $ip
 * @property string $created_at
 * @property string $aliasModel
 */
abstract class AccessLog extends \yii\db\ActiveRecord
{
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * ENUM field values
     */
    const TYPE_WEB = 'web';
    const TYPE_API = 'api';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'access_log';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => \app\components\behaviors\UUIDBehavior::class,
                'model' => get_called_class(),
            ],
            [
                'class' => TimestampBehavior::class,
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => false,
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['type', 'path', 'request', 'method', 'ip'], 'required'],
            [['type', 'request', 'response'], 'string'],
            [['user_id'], 'integer'],
            [['created_at'], 'safe'],
            [['username', 'role'], 'string', 'max' => 100],
            [['path'], 'string', 'max' => 140],
            [['method'], 'string', 'max' => 15],
            [['ip'], 'string', 'max' => 45],
            [
                'type', 'in', 'range' => [
                    self::TYPE_WEB,
                    self::TYPE_API,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'type' => Yii::t('models', 'Type'),
            'user_id' => Yii::t('models', 'User'),
            'username' => Yii::t('models', 'Username'),
            'role' => Yii::t('models', 'Role'),
            'path' => Yii::t('models', 'Path'),
            'request' => Yii::t('models', 'Request'),
            'response' => Yii::t('models', 'Response'),
            'method' => Yii::t('models', 'Method'),
            'ip' => Yii::t('models', 'Ip'),
            'created_at' => Yii::t('models', 'Created At'),
        ];
    }




    /**
     * get column type enum value label
     * @param string $value
     * @return string
     */
    public static function getTypeValueLabel($value)
    {
        $labels = self::optsType();
        if (isset($labels[$value])) {
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column type ENUM value labels
     * @return array
     */
    public static function optsType()
    {
        return [
            self::TYPE_WEB => Yii::t('models', self::TYPE_WEB),
            self::TYPE_API => Yii::t('models', self::TYPE_API),
        ];
    }


    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'type',
            'user_id',
            'username',
            'role',
            'path',
            'request',
            'response',
            'method',
            'ip',
            'created_at',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['type'])) :
            unset($parent['type']);
            $parent['type'] = function ($model) {
                return $model->type;
            };
        endif;
        if (isset($parent['user_id'])) :
            unset($parent['user_id']);
            $parent['user_id'] = function ($model) {
                return $model->user_id;
            };
        endif;
        if (isset($parent['username'])) :
            unset($parent['username']);
            $parent['username'] = function ($model) {
                return $model->username;
            };
        endif;
        if (isset($parent['role'])) :
            unset($parent['role']);
            $parent['role'] = function ($model) {
                return $model->role;
            };
        endif;
        if (isset($parent['path'])) :
            unset($parent['path']);
            $parent['path'] = function ($model) {
                return $model->path;
            };
        endif;
        if (isset($parent['request'])) :
            unset($parent['request']);
            $parent['request'] = function ($model) {
                return $model->request;
            };
        endif;
        if (isset($parent['response'])) :
            unset($parent['response']);
            $parent['response'] = function ($model) {
                return $model->response;
            };
        endif;
        if (isset($parent['method'])) :
            unset($parent['method']);
            $parent['method'] = function ($model) {
                return $model->method;
            };
        endif;
        if (isset($parent['ip'])) :
            unset($parent['ip']);
            $parent['ip'] = function ($model) {
                return $model->ip;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->created_at, false);
            };
        endif;



        return $parent;
    }


    public function faker()
    {
        $faker = \Faker\Factory::create();
        $data = [
            "id" => $faker->unique()->randomNumber(11),
            "type" => $faker->randomNumber(),
            "user_id" => $faker->unique()->randomNumber(11),
            "username" => $faker->name,
            "role" => $faker->randomNumber(),
            "path" => $faker->randomNumber(),
            "request" => $faker->randomNumber(),
            "response" => $faker->randomNumber(),
            "method" => $faker->randomNumber(),
            "ip" => $faker->randomNumber(),
            "created_at" => $faker->dateTime(),
        ];
        return $data;
    }
}
