<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\modules\notification\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "notification".
 *
 * @property string $id
 * @property string $user_id
 * @property string $title
 * @property string $description
 * @property string $controller
 * @property string $android_route
 * @property string $params
 * @property integer $read
 * @property string $created_at
 *
 * @property \app\modules\notification\models\User $user
 * @property string $aliasModel
 */
abstract class Notification extends \yii\db\ActiveRecord
{
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'notification';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            // add uuid behavior
            [
                'class' => \app\components\behaviors\UUIDBehavior::class,
                'model' => get_called_class(),
                'primaryKey' => 'id',
            ],
            [
                'class' => TimestampBehavior::class,
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => false,
                'value' => date("Y-m-d H:i:s"),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'read'], 'integer'],
            [['title', 'description', 'controller'], 'required'],
            [['description', 'params'], 'string'],
            [['created_at'], 'safe'],
            [['title'], 'string', 'max' => 100],
            [['controller', 'android_route'], 'string', 'max' => 150],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::class, 'targetAttribute' => ['user_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'user_id' => Yii::t('models', 'User'),
            'title' => Yii::t('models', 'Title'),
            'description' => Yii::t('models', 'Description'),
            'controller' => Yii::t('models', 'Controller'),
            'android_route' => Yii::t('models', 'Android Route'),
            'params' => Yii::t('models', 'Params'),
            'read' => Yii::t('models', 'Read'),
            'created_at' => 'Dibuat pada',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\app\models\User::class, ['id' => 'user_id']);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'user_id',
            'title',
            'description',
            'controller',
            'android_route',
            'params',
            'read',
            'created_at',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['user_id'])) :
            unset($parent['user_id']);
            $parent['user_id'] = function ($model) {
                return $model->user_id;
            };
            $parent['_user'] = function ($model) {
                $rel = $model->user;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['title'])) :
            unset($parent['title']);
            $parent['title'] = function ($model) {
                return $model->title;
            };
        endif;
        if (isset($parent['description'])) :
            unset($parent['description']);
            $parent['description'] = function ($model) {
                return $model->description;
            };
        endif;
        if (isset($parent['controller'])) :
            unset($parent['controller']);
            $parent['controller'] = function ($model) {
                return $model->controller;
            };
        endif;
        if (isset($parent['android_route'])) :
            unset($parent['android_route']);
            $parent['android_route'] = function ($model) {
                return $model->android_route;
            };
        endif;
        if (isset($parent['params'])) :
            unset($parent['params']);
            $parent['params'] = function ($model) {
                return $model->params;
            };
        endif;
        if (isset($parent['read'])) :
            unset($parent['read']);
            $parent['read'] = function ($model) {
                return $model->read;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->created_at, false);
            };
        endif;



        return $parent;
    }


    public function faker()
    {
        $faker = \Faker\Factory::create();
        $data = [
            "id" => $faker->unique()->randomNumber(11),
            "user_id" => \app\components\Constant::getRandomFrom(\app\components\Constant::getIDs(\app\models\User::find()->select('id')->all(), 'id')),
            "title" => $faker->sentence($nbWords = 6, $variableNbWords = true),
            "description" => $faker->paragraphs($nb = 3, $asText = true),
            "controller" => $faker->randomNumber(),
            "android_route" => $faker->randomNumber(),
            "params" => $faker->randomNumber(),
            "read" => $faker->unique()->randomNumber(11),
            "created_at" => $faker->dateTime(),
        ];
        return $data;
    }
}
