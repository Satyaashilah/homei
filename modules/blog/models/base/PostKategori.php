<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\modules\blog\models\base;

use Yii;

/**
 * This is the base-model class for table "blog_post_kategori".
 *
 * @property string $id_post
 * @property integer $id_kategori
 * @property string $id
 *
 * @property \app\modules\blog\models\Kategori $kategori
 * @property \app\modules\blog\models\Post $post
 * @property string $aliasModel
 */
abstract class PostKategori extends \yii\db\ActiveRecord
{
    /**
     * BaseModel rules. 
     **/
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog_post_kategori';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => \app\components\behaviors\UUIDBehavior::class,
                'model' => get_called_class(),
                'primaryKey' => 'id',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_post', 'id_kategori'], 'required'],
            [['id_kategori'], 'integer'],
            [['id_post'], 'string', 'max' => 36],
            [['id'], 'unique'],
            [['id_post'], 'exist', 'skipOnError' => true, 'targetClass' => \app\modules\blog\models\Post::className(), 'targetAttribute' => ['id_post' => 'id']],
            [['id_kategori'], 'exist', 'skipOnError' => true, 'targetClass' => \app\modules\blog\models\Kategori::className(), 'targetAttribute' => ['id_kategori' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'id_post' => Yii::t('models', 'Post'),
            'id_kategori' => Yii::t('models', 'Kategori'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKategori()
    {
        return $this->hasOne(\app\modules\blog\models\Kategori::className(), ['id' => 'id_kategori']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPost()
    {
        return $this->hasOne(\app\modules\blog\models\Post::className(), ['id' => 'id_post']);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'id_post',
            'id_kategori',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['id_post'])) :
            unset($parent['id_post']);
            $parent['id_post'] = function ($model) {
                return $model->id_post;
            };
            $parent['_post'] = function ($model) {
                $rel = $model->post;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['id_kategori'])) :
            unset($parent['id_kategori']);
            $parent['id_kategori'] = function ($model) {
                return $model->id_kategori;
            };
            $parent['_kategori'] = function ($model) {
                $rel = $model->kategori;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;



        return $parent;
    }


    public static function faker($count = 10)
    {
        $faker = \Faker\Factory::create();
        $faker->addProvider(new \app\components\faker\provider\MyImage($faker));
        $data = [];
        $maxId = static::find()->max('id');

        // relational data
        $relationalpost = \app\components\Constant::getIDs(\app\modules\blog\models\Post::find()->select('id')->all(), 'id');
        $relationalkategori = \app\components\Constant::getIDs(\app\modules\blog\models\Kategori::find()->select('id')->all(), 'id');
        for ($i = 0; $i < $count; $i++) {
            $data[] = [
                "id_post" => \app\components\Constant::getRandomFrom($relationalpost),
                "id_kategori" => \app\components\Constant::getRandomFrom($relationalkategori),
                "id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
            ];
        }
        return $data;
    }
}
