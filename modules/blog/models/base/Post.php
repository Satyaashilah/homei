<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\modules\blog\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "blog_post".
 *
 * @property string $slug
 * @property string $image
 * @property string $title
 * @property string $tag
 * @property string $kilasan
 * @property string $content
 * @property integer $view_count
 * @property string $id_author
 * @property string $created_at
 * @property string $updated_at
 * @property integer $flag
 * @property string $id
 *
 * @property \app\models\User $author
 * @property \app\modules\blog\models\PostKategori[] $postKategoris
 * @property string $aliasModel
 */
abstract class Post extends \yii\db\ActiveRecord
{
    /**
     * BaseModel rules. 
     **/
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog_post';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            // sluggable behaviors
            [
                'class' => \yii\behaviors\SluggableBehavior::class,
                'attribute' => 'title',
                'slugAttribute' => 'slug',
                'ensureUnique' => true,
                'immutable' => true,
                'value' => function ($event) {
                    return Yii::$app->formatter->asSlug($event->sender->title) . '-' . time();
                },
            ],
            [
                'class' => \app\components\behaviors\UUIDBehavior::class,
                'model' => get_called_class(),
                'primaryKey' => 'id',
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => date("Y-m-d H:i:s"),
            ],
            // post summary behaviors
            [
                'class' => \app\modules\blog\behaviors\PostSummaryBehavior::class,
                'attribute' => 'kilasan',
                'sourceAttribute' => 'content',
                'length' => 200,
            ],
            // blamable behaviors
            [
                'class' => \yii\behaviors\BlameableBehavior::class,
                'createdByAttribute' => 'id_author',
                'updatedByAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'tag', 'content', 'categories'], 'required'],
            [['tag', 'kilasan', 'content'], 'string'],
            [['view_count', 'flag'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['slug', 'image'], 'string', 'max' => 150],
            [['title'], 'string', 'max' => 250],
            [['id_author'], 'string', 'max' => 36],
            [['id', 'slug'], 'unique'],
            [['id_author'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\User::className(), 'targetAttribute' => ['id_author' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'slug' => Yii::t('models', 'Slug'),
            'image' => Yii::t('models', 'Image'),
            'categories' => Yii::t('models', 'Categories'),
            'title' => Yii::t('models', 'Title'),
            'tag' => Yii::t('models', 'Tag'),
            'kilasan' => Yii::t('models', 'Kilasan'),
            'content' => Yii::t('models', 'Content'),
            'view_count' => Yii::t('models', 'View Count'),
            'id_author' => Yii::t('models', 'Author'),
            'created_at' => Yii::t('models', 'Dibuat pada'),
            'updated_at' => Yii::t('models', 'Diubah Pada'),
            'flag' => Yii::t('models', 'Flag'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(\app\models\User::className(), ['id' => 'id_author']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostKategoris()
    {
        return $this->hasMany(\app\modules\blog\models\PostKategori::className(), ['id_post' => 'id']);
    }


    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'slug',
            'categories',
            'image',
            'title',
            'tag',
            'kilasan',
            'content',
            'view_count',
            'id_author',
            'created_at',
            'updated_at',
            'flag',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }

    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if (isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function ($model) {
                return $model->id;
            };
        endif;
        if (isset($parent['slug'])) :
            unset($parent['slug']);
            $parent['slug'] = function ($model) {
                return $model->slug;
            };
        endif;
        if (isset($parent['image'])) :
            unset($parent['image']);
            $parent['image'] = function ($model) {
                return \Yii::$app->formatter->asMyImage($model->image, false);
            };
        endif;
        if (isset($parent['title'])) :
            unset($parent['title']);
            $parent['title'] = function ($model) {
                return $model->title;
            };
        endif;
        if (isset($parent['tag'])) :
            unset($parent['tag']);
            $parent['tag'] = function ($model) {
                return $model->tag;
            };
        endif;
        if (isset($parent['kilasan'])) :
            unset($parent['kilasan']);
            $parent['kilasan'] = function ($model) {
                return $model->kilasan;
            };
        endif;
        if (isset($parent['content'])) :
            unset($parent['content']);
            $parent['content'] = function ($model) {
                return $model->content;
            };
        endif;
        if (isset($parent['view_count'])) :
            unset($parent['view_count']);
            $parent['view_count'] = function ($model) {
                return $model->view_count;
            };
        endif;
        if (isset($parent['id_author'])) :
            unset($parent['id_author']);
            $parent['id_author'] = function ($model) {
                return $model->id_author;
            };
            $parent['_author'] = function ($model) {
                $rel = $model->author;
                if ($rel) :
                    return $rel;
                endif;
                return null;
            };
        endif;
        if (isset($parent['created_at'])) :
            unset($parent['created_at']);
            $parent['created_at'] = function ($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->created_at, false);
            };
        endif;
        if (isset($parent['updated_at'])) :
            unset($parent['updated_at']);
            $parent['updated_at'] = function ($model) {
                return \app\helpers\DateTimeHelper::toReadableDate($model->updated_at, false);
            };
        endif;
        if (isset($parent['flag'])) :
            unset($parent['flag']);
            $parent['flag'] = function ($model) {
                return $model->flag;
            };
        endif;


        // $parent['post_kategori'] = function($model) {
        //     $rel = $model->postKategoris;
        //     if($rel) :
        //         return $rel;
        //     endif;
        //     return null;
        // };

        return $parent;
    }


    public static function faker($count = 10)
    {
        $faker = \Faker\Factory::create();
        $faker->addProvider(new \app\components\faker\provider\MyImage($faker));
        $data = [];
        $maxId = static::find()->max('id');

        // relational data
        $relationalauthor = \app\components\Constant::getIDs(\app\models\User::find()->select('id')->all(), 'id');
        for ($i = 0; $i < $count; $i++) {
            $data[] = [
                "slug" => $faker->slug,
                "image" => "tmp/" . $faker->myimage($dir = \Yii::getAlias('@webroot/uploads/tmp'), $width = 640, $height = 480, "cats", false),
                "title" => $faker->sentence($nbWords = 6, $variableNbWords = true),
                "tag" => $faker->text(),
                "kilasan" => $faker->text(),
                "content" => $faker->text(),
                "view_count" => $faker->randomNumber(),
                "id_author" => \app\components\Constant::getRandomFrom($relationalauthor),
                "created_at" => $faker->dateTime(),
                "updated_at" => $faker->dateTime(),
                "flag" => $faker->numberBetween(0, 1),
                "id" => $faker->unique()->numberBetween($maxId, $maxId + $count),
            ];
        }
        return $data;
    }
}
