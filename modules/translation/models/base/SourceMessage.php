<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build
// Modified by Defri Indra
// 2021

namespace app\modules\translation\models\base;

use Yii;

/**
 * This is the base-model class for table "source_message".
 *
 * @property integer $id
 * @property string $category
 * @property string $message
 *
 * @property \app\modules\translation\models\Message[] $messages
 * @property string $aliasModel
 */
abstract class SourceMessage extends \yii\db\ActiveRecord
{
    use \app\traits\ModelTrait;

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    public $_render = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'source_message';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['message'], 'string'],
            [['category'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
        'id' => Yii::t('models', 'ID'),
        'category' => Yii::t('models', 'Category'),
        'message' => Yii::t('models', 'Message'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMessages()
    {
        return $this->hasMany(\app\modules\translation\models\Message::class, ['id' => 'id']);
    }





    public function scenarios()
    {
        $parent = parent::scenarios();

        $columns = [
            'id',
            'category',
            'message',
        ];

        $parent[static::SCENARIO_CREATE] = $columns;
        $parent[static::SCENARIO_UPDATE] = $columns;
        return $parent;
    }


    /**
     * @inheiritance
     */
    public function fields()
    {
        $parent = parent::fields();

        if(isset($parent['id'])) :
            unset($parent['id']);
            $parent['id'] = function($model) {
                return $model->id;
            };
        endif;
        if(isset($parent['category'])) :
            unset($parent['category']);
            $parent['category'] = function($model) {
                return $model->category;
            };
        endif;
        if(isset($parent['message'])) :
            unset($parent['message']);
            $parent['message'] = function($model) {
                return $model->message;
            };
        endif;


    // $parent['message'] = function($model) {
    //     $rel = $model->messages;
    //     if($rel) :
    //         return $rel;
    //     endif;
    //     return null;
    // };

        return $parent;
    }


    public function faker(){
        $faker= \Faker\Factory::create();
        $data = [ 
            "id" => $faker->unique()->randomNumber(11),
            "category" => $faker->randomNumber(),
            "message" => $faker->randomNumber(),
        ];
        return $data;
    }

}
